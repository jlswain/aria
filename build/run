#!/usr/bin/env node

let Command     = require('./execute/command'),
    Executor    = require('./execute/executor'),
    program     = require('commander'),
    fs          = require('fs');

let DIRECTIVES  = [
        { cmd : 'all'       , info : 'Install dependencies, runs a build and tests it'  },
        { cmd : 'enviro'    , info : 'Install environment dependencies'                 },
        { cmd : 'deps'      , info : 'Install project dependencies'                     },
        { cmd : 'build'     , info : 'Compile project and run build'                    },
        { cmd : 'test'      , info : 'Run tests on built projects'                      },
        { cmd : 'deploy'    , info : 'Starts running the built project'                 },
        { cmd : 'clean'     , info : 'Cleans the build resources'                       },
        { cmd : 'release'   , info : 'Creates a release of the entire project'          }
    ];

var manifest = `${__dirname}/manifest.json`, config, directive, target, commands, root;

function setCommand (_directive, _target) {
    directive   = _directive;
    target      = _target;
}

function commandNames () {
    return DIRECTIVES.map((dir) => { return dir.cmd; });
}

program
    .version('0.1.0')
    .arguments('<cmd> [options ...] [target]')
    .option('-a, --stay-alive'  , 'Continue to run the directive even if an error occurs')
    .option('-m, --manifest'    , 'Execute build with specific manifest')
    .option('-q, --quiet'       , 'Do not display output from commands being executed')
    .option('-S, --silent'      , 'Do not display any output')
    .option('-r, --root'        , 'Root directory where target should be executed from')
    .option('-s, --stats'       , 'Display build statistics at end of execution')
    .option('-v, --verbose'     , 'Display verbose messages');


DIRECTIVES.forEach((directive) => {
    program
        .command(`${directive.cmd} [target]`)
        .description(directive.info)
        .action(setCommand.bind(null, directive.cmd));
});

program.parse(process.argv);

if (typeof directive === 'undefined') {
    console.log('[WARN] No command specified - Assuming "build"');
    directive = 'build';
} else if (commandNames().indexOf(directive) < 0) {
    console.error(`Error: Unknown command specified ${directive} - See --help for details`);
    process.exit(1);
}

try {
    config = JSON.parse(fs.readFileSync(manifest));
}
catch (e) {
    console.error('Error: Could not read manifest file');
    console.error(e);
    process.exit(1);
}


root = program.root || __dirname;
commands = Command.parse(config, directive, target).map((cmd) => {
    return cmd.root(root);
});
program.quiet = program.quiet || program.silent;
new Executor(commands, program).run();






