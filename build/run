#!/usr/bin/env node

let Command     = require('./execute/command'),
    Executor    = require('./execute/executor'),
    program     = require('commander'),
    fs          = require('fs');

let ALL         = ['enviro', 'deps', 'build', 'test'],
    DIRECTIVES  = [
        { cmd : 'enviro'    , info : 'Install environment dependencies' },
        { cmd : 'deps'      , info : 'Install project dependencies'     },
        { cmd : 'build'     , info : 'Compile project and run build'    },
        { cmd : 'test'      , info : 'Run tests on built projects'      },
        { cmd : 'deploy'    , info : 'Starts running the built project' },
        { cmd : 'clean'     , info : 'Cleans the build resources'       }
    ];

var manifest = `${__dirname}/manifest.json`, command, root = __dirname, config;

function makeCommand (directive, target) {
    command = new Command(directive, target);
    command.root = root;
}

program
    .version('0.1.0')
    .arguments('<cmd> [options ...] [target]')
    .option('-a, --stay-alive'  , 'Continue to run the directive even if an error occurs')
    .option('-m, --manifest'    , 'Execute build with specific manifest')
    .option('-q, --quiet'       , 'Do not display output from commands being executed')
    .option('-r, --root'        , 'Root directory where target should be executed from')
    .option('-s, --stats'       , 'Display build statistics at end of execution')
    .option('-v, --verbose'     , 'Display verbose messages');


program
    .command('all [target]')
    .description('Install all dependencies, runs a build and tests it')
    .action((target) => {
        command = new Command().children(ALL.map((directive) => {
            var cmd = new Command(directive, target);
            cmd.root = root;
            return cmd;
        }));
        command.root = root;
    });


DIRECTIVES.forEach((directive) => {
    program
        .command(`${directive.cmd} [target]`)
        .description(directive.info)
        .action(makeCommand.bind(null, directive.cmd));
});

program.parse(process.argv);

if (typeof command === 'undefined') {
    console.log('[WARN] No command specified - Assuming "build"');
    makeCommand('build');
}

try {
    config = JSON.parse(fs.readFileSync(manifest));
}
catch (e) {
    console.error('Error: Could not read manifest file');
    console.error(e);
    process.exit(1);
}

command = Command.populate(config, command);
new Executor(command, program).run();






